#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'todo'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

include GLI::App

program_desc 'Simple command line to do application'

version Todo::VERSION

desc 'File containing our to do items'
default_value 'todos.txt'
arg_name 'filename'
flag [:f,:file]

desc 'Add a new to do item to your list'
long_desc """
The item will be added to the bottom of your list - unless 
you specify a different priority for this item."""
arg_name '"My to-do item"'
command :new do |c|
  c.desc 'Place this item at the top of your to do list.'
  c.switch [:f, :first]
  
  c.desc 'Assign priority of the new task, 1 being highest priority'
  c.arg_name 'priority (integer)'
  c.flag [:p, :priority]
  
  c.action do |global_options,options,task_names|
    File.open(global_options[:f], 'a') do |file|
      if task_names.empty?
        puts "Reading new tasks one per line. Use Ctrl-D to finish."
        task_names = STDIN.readlines.map {|a| a.chomp }
      end
      tasks = 0
      task_names.each do |task|
        write_todo(file, task)
        puts "Task added"
        tasks += 1
      end
      if tasks == 0 
        raise "You must provide tasks on the command-line or standard input."
      end
    end
  end
end

desc 'List your to do items'
command [:list, :ls] do |c|
  c.desc 'Sort by name or priority - not implemented yet'
  c.default_value 'priority'
  c.arg_name 'sort_key'
  c.flag [:s, :sort]

  c.desc 'Format of the output'
  c.arg_name 'csv|pretty'
  c.default_value 'pretty'
  c.flag :format

  c.action do |global_options,options,args|
    File.open(global_options[:f], 'r') do |file|
      counter = 1
      file.readlines.each do |line|
        if options[:format] == 'pretty'
          display_todo(line, counter)
        else
          machine_readable_todo(line, counter)
        end
        counter += 1
      end
    end
  end
end

desc 'Mark an item as done.'
arg_name 'item_number'
command :done do |c|
  c.action do |global_options,options,args|
    completed_item = args.shift.to_i

    File.open(global_options[:f], 'r') do |infile|
      File.open(global_options[:f]+ '.NEW', 'w') do |outfile|
        counter = 1
        infile.readlines.each do |line|
          if completed_item == counter
            # Write out existing data plus completion time
            name, created, completed = read_todo(line)
            write_todo(outfile, name, created, Time.now)
          else
            # Just copy the existing data to the new file
            write_todo(outfile, *read_todo(line))
          end
          counter += 1
        end
      end
    end
    FileUtils.mv(global_options[:f]+ '.NEW', global_options[:f])
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

def write_todo(file, task, created=Time.now, completed='')
  file.puts("#{task},#{created},#{completed}")
end

def display_todo(line, counter)
  name, created, completed = read_todo(line)
  printf("%3d - %s\n", counter,name) 
  printf("      Created:   #{created} \n")
  unless completed.nil?
      printf ("      Completed: #{completed}\n")
  end
end

def machine_readable_todo(line, counter)
  name, created, completed = read_todo(line)
  completed_flag = completed ? "C" : "U"
  printf("%d,%s,%s,%s,%s\n",counter,name,completed_flag,created,completed)
end

def read_todo(line)
  line.chomp.split(',')
end

exit run(ARGV)
