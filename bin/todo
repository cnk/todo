#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'todo'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

include Todo
include GLI::App

program_desc 'Simple command line to do application'

version Todo::VERSION

desc 'File containing our to do items'
default_value File.join(ENV['HOME'],'todo.txt')
arg_name 'filename'
flag [:f,:file]

desc 'Add a new to do item to your list'
long_desc """
The item will be added to the bottom of your list - unless 
you specify a different priority for this item."""
arg_name '"My to-do item"'
command :new do |c|
  c.desc 'Place this item at the top of your to do list.'
  c.switch [:f, :first]
  
  c.desc 'Assign priority of the new task, 1 being highest priority'
  c.arg_name 'priority (integer)'
  c.flag [:p, :priority]
  
  c.action do |global_options,options,task_names|
    if task_names.empty?
      puts "Reading new tasks one per line. Use Ctrl-D to finish."
      task_names = STDIN.readlines.map {|a| a.chomp }
    end
    new_task(global_options[:file], task_names)
  end
end

desc 'List your to do items'
command [:list, :ls] do |c|
  c.desc 'Sort by name or priority - not implemented yet'
  c.default_value 'priority'
  c.arg_name 'sort_key'
  c.flag [:s, :sort]

  c.desc 'Format of the output. If not specified, defaults to pretty unless the output is piped to another program.'
  output_formats = { csv: Todo::Format::CSV.new, pretty: Todo::Format::Pretty.new }
  c.arg_name output_formats.keys.join('|')
  c.flag :format

  c.action do |global_options,options,args|
    if options[:format].nil?
      options[:format] = STDOUT.tty? ? 'pretty' : 'csv'
    end
    formatter = output_formats[options[:format].to_sym]
    list_tasks(global_options[:file], formatter)
  end
end

desc 'Mark an item as done.'
arg_name 'item_number'
command :done do |c|
  c.action do |global_options,options,args|
    completed_item = args.shift.to_i
    complete_task(global_options[:file], completed_item)
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the chosen command
  # Use skips_pre before a command to skip this block on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
